# ##################################
# same but different
alias cdmaster="cd ~/Documents/ttfs_pytorch/src"
export PATH=$PATH:~/MasterThesis/model-tempodrom/help_scripts
fpath=(~/MasterThesis/model-tempodrom/help_scripts/completion $fpath)
[[ $PATH == *".local/bin"* ]] || export PATH="$HOME/bin:$HOME/.local/bin:$PATH"

# git editor and pager; easier to set host specific
export GIT_PAGER=delta\ --theme=GitHub
export GIT_EDITOR=nvim

# ##################################
# very different
if [ -z $SINGULARITY_APPNAME ]; then
	source /wang/environment/software/Modules/current/init/zsh
	# to have access to new module files, eg the one with vim+x
	export MODULEPATH=/wang/environment/software/jessie/spack/20180129_live/modules:$MODULEPATH
else
	source /opt/init/modules.sh
	source /opt/spack/share/spack/setup-env.sh
fi

#spack_global
if [ -z "$TMUX" -a -z $SINGULARITY_APPNAME ]; then
	module load waf
	# module load nmpm_software/$(readlink /wang/environment/modules/nmpm_software/current)
	module load ppu-toolchain
	module load tools-slurm
	module load tools-kintex7

	module load slurm-singularity/current
	export SINGULARITYENV_PREPEND_PATH=$SINGULARITYENV_PREPEND_PATH:$HOME/myConfigFiles/toolbox
	export SINGULARITY_SHELL=/bin/zsh

fi

module list

export PATH=$PATH:~/pip_files
export PATH=$PATH:~/tmpbuild
if $( echo $PYTHONPATH | grep -vq pip_files); then
	export PYTHONPATH=$PYTHONPATH:/wang/users/jgoeltz/cluster_home/pip_files/
	export PYTHONPATH=$PYTHONPATH:/wang/users/jgoeltz/cluster_home/pip_files/lib/python2.7/site-packages/
	export PYTHONPATH=$PYTHONPATH:/wang/users/jgoeltz/cluster_home/builds_python
	export PYTHONPATH=$PYTHONPATH:/wang/users/jgoeltz/cluster_home/builds_python/lib/python2.7/site-packages/
fi

export MANPATH=/usr/local/share/man:$MANPATH



if [ -z "$PREEXEC_FUNCTIONS_AMMENDED" ]; then
	preexec_functions=($preexec_functions updateEnvTmux)
	PREEXEC_FUNCTIONS_AMMENDED="set"
fi
function updateEnvEverywhere () {
	for _pane in `tmux list-panes -a -F '#{pane_id}'`
	do
		tmux send-keys -t ${_pane} ^z ^u updateEnv ^m fg ^m ;
	done
}
function updateEnvTmux () {
	[ -n "$TMUX" ] && updateEnv
}
function updateEnv () {
	# uses the current (from the environment where tmux attach was done) ssh agent and display to allow ssh forwarding and X11 forwarding
	# -> pushing and pulling in git and display use

	# filter out the unset variables, identified by leading dash
	tmp="$(tmux show-environment | grep -v "^-")"
	eval "export $(echo "$tmp" | grep SSH_AUTH_SOCK) >/dev/null"
	eval "export $(echo "$tmp" | grep DISPLAY) >/dev/null"
}

function saveplottedtobackup() {
	for file in $@; do
		# preprocessing
		if [ ! -e "$file" ] ; then
			echo "$file doesn't exist, skipping"
			continue
		fi
		madeFileWriteableFirst=false
		if [ $(stat -c %a $file | grep -o '^[0-9]') -eq 4 ]; then
			echo "might run into problems, then make file readable first"
			chmod +w $file
			madeFileWriteableFirst=true
		fi

		function tmp_saveplottedtobackup() {
			if [ -f "$2" ]; then
				# file
				# copy to folder if not already done and make readonly
				if [ -f "${1}$(basename 2)" ] ; then
					echo "File $2 already exists in $1, not copying"
				else
					cp $2 "$1$(basename $2)"
					chmod 444 "$1$(basename $2)"
				fi
			elif [ -d "$2" ]; then
				# directory
				if [ -f "${1}$(basename 2).tar" ] ; then
					echo "File $(basename $2).tar already exists in $1, not copying"
				else
					tar -cf "$1$(basename $2).tar" $2
					chmod 444 "$1$(basename $2).tar"
				fi
			else 
				echo "${2} not file nor folder but does exist?!"
			fi
		}

		# tmp_saveplottedtobackup /wang/users/jgoeltz/cluster_home/MasterThesis/data_tempodrom_backupPlotted/ $file
		# tmp_saveplottedtobackup /loh/users/jgoeltz/data_tempodrom_backupPlotted/ $file
		# tmp_saveplottedtobackup /wang/users/jgoeltz/cluster_home/MasterThesis/data_hiwi_backup/ $file
		# tmp_saveplottedtobackup /loh/users/jgoeltz/data_hiwi_backup/ $file

		tmp_saveplottedtobackup /wang/users/jgoeltz/cluster_home/Documents/backup_data_ttfs/ $file
		tmp_saveplottedtobackup /loh/users/jgoeltz/backup_data_ttfs/ $file

		# make readonly again
		if $madeFileWriteableFirst; then
			chmod -w $file
		fi
	done
}

# alias squeueRepeat='while true; do tmp=$(date; LLSS="(W66|W67)" ~/myConfigFiles/toolbox/whichLicences.sh); clear; echo -en "$tmp"; sleep 10; done'
alias squeueRepeat='while true; do tmp=$(date; ~/myConfigFiles/toolbox/whichLicences.sh); clear; echo -en "$tmp"; sleep 10; done'
#alias squeueRepeatWork="cd ~/MasterThesis/model-tempodrom/code; while true; do squeueRepeat.sh work | tee ~/.tmp_squeueRepeat ; done"
# function squeueRepeat () {
# 	while true; do
# 		echo -e \\033c
# 		date +"%H:%M:%S"
# 		squeue -o "%.10i %.9P %.8u %.2t %.8M" | grep "experimen\|goelt\|JOBID" --color=auto
# 		if [ "$1" != "" ]; then
# 			echo $1
# 			eval $1
# 		fi
# 		sleep 5
# 	done
# }

# singularity stuff
# singularity shell --app visionary-defaults /containers/stable/latest
# or even better 
singularityzsh () {
	if ! module list 2>&1 | grep -q nmpm_software; then
		echo "no nmpm module loaded"
		return
	fi
	tmpString='singularity exec --app $CONTAINER_APP_NMPM_SOFTWARE $CONTAINER_IMAGE_NMPM_SOFTWARE zsh'
	echo "about to eval '$tmpString'"
	eval $tmpString
}
alias singularityemrun='singularity exec --app visionary-wafer /containers/stable/latest zsh -c ". /opt/spack/share/spack/setup-env.sh; spack load emscripten; module list; cd $BASEDIR_NMPM_SOFTWARE/lib/webvisu; emrun --no_browser main.html"'

# to cd to current jenkins workspace if a p_jg_TimeToFirstSpike is running
alias cdjenk="cd; cd /jenkins/jenlib_workspaces_f9/p_jg_T*x/"

function tmux_killall () {
	# kill all tmux clients
	echo "before"
	tmux list-clients
	for cl in $(tmux list-clients | awk '{print $2}'); do
		tmux detach -s "$cl"
	done
	echo "after"
	tmux list-clients
	# in all sessions set DISPLAY and SS_AUTH_SOCK
	IFS=$'\n'
	for sess in $(tmux list-sessions | grep -oP "^[^:]*"); do
		tmux setenv -t "$sess" DISPLAY $DISPLAY
		tmux setenv -t "$sess" SSH_AUTH_SOCK $SSH_AUTH_SOCK
	done
	unset IFS
}

alias eog=eom

# use proxied git command
export GIT_SSH_COMMAND="ssh -F ~/.ssh/config_prox"

# use sacct to display all infos
function sacct_full () {
	less -S -f <(sacct -j $1  --format=$(sacct -e | tr '\n' ' ' | sed 's/\s\+/,/g')) 
}


# load hx stuff
load_hx_stuff() {
	local path_software path_repo
	if [ -n "$1" ]; then
		path_software="$1"
	else
		echo "using standard software folder"
		path_software="/wang/users/jgoeltz/cluster_home/Documents/utils/hx_software/"
	fi
	if [ -n "$2" ]; then
		path_repo="$2"
	else
		echo "using standard repo folder"
		path_repo="/wang/users/jgoeltz/cluster_home/Documents/ttfs_pytorch/src"
	fi
	echo "loading software from ${path_software}"
	cd "$path_software"
	module list
	module purge
	module load localdir
	module list
	cd "$path_repo"
	echo "exporting to pythonpath ${path_repo}/py"
	export PYTHONPATH="${path_repo}/py:$PYTHONPATH"
}
